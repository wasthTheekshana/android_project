Let me provide a clearer, step-by-step guide to create this railway station information system.

Step 1: Create Project Directory and Initialize Backend
```bash
# Create and enter project directory
mkdir railway-station-info
cd railway-station-info

# Initialize Node.js project
npm init -y

# Install backend dependencies
npm install express cors
npm install --save-dev concurrently nodemon
```

Step 2: Create Backend Files
```bash
# Create server.js file
touch server.js
```

Now edit server.js with this content:

const express = require('express');
const cors = require('cors');
const app = express();

app.use(cors());
app.use(express.json());

// Main line stations data (Colombo Fort to Badulla)
const stations = [
  { 
    name: "Colombo Fort",
    elevation: 5,
    distance: 0
  },
  {
    name: "Maradana",
    elevation: 7,
    distance: 1.8
  },
  {
    name: "Kandy",
    elevation: 500,
    distance: 121
  },
  {
    name: "Peradeniya",
    elevation: 488,
    distance: 114
  },
  {
    name: "Gampola",
    elevation: 536,
    distance: 134
  },
  {
    name: "Nawalapitiya",
    elevation: 628,
    distance: 147
  },
  {
    name: "Hatton",
    elevation: 1271,
    distance: 179
  },
  {
    name: "Nanu Oya",
    elevation: 1890,
    distance: 219
  },
  {
    name: "Badulla",
    elevation: 680,
    distance: 292
  }
];

// GET all stations
app.get('/api/stations', (req, res) => {
  res.json(stations);
});

// GET specific station
app.get('/api/station/:name', (req, res) => {
  const stationName = req.params.name.toLowerCase();
  const station = stations.find(s => s.name.toLowerCase() === stationName);
  
  if (station) {
    res.json(station);
  } else {
    res.status(404).json({ error: 'Station not found' });
  }
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

Step 3: Update Backend package.json
Edit your package.json to include these scripts:

{
  "name": "railway-station-info",
  "version": "1.0.0",
  "description": "Sri Lankan Railway Station Information System",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "server": "nodemon server.js",
    "client": "cd client && npm start",
    "dev": "concurrently \"npm run server\" \"npm run client\""
  },
  "dependencies": {
    "express": "^4.17.1",
    "cors": "^2.8.5"
  },
  "devDependencies": {
    "concurrently": "^6.2.0",
    "nodemon": "^2.0.7"
  }
}

Step 4: Create React Frontend
```bash
# Create React app in client directory
npx create-react-app client

# Navigate to client directory
cd client

# Install frontend dependencies
npm install axios @tailwindcss/postcss7-compat postcss autoprefixer
```

Step 5: Configure Tailwind CSS
In the client directory:

```bash
# Install Tailwind CSS
npm install tailwindcss@latest

# Generate tailwind.config.js
npx tailwindcss init
```

Step 6: Create Frontend Files
1. Update client/src/index.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

2. Replace client/src/App.js with:

import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [station, setStation] = useState('');
  const [stationInfo, setStationInfo] = useState(null);
  const [error, setError] = useState('');

  const handleSearch = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.get(`http://localhost:5000/api/station/${station}`);
      setStationInfo(response.data);
      setError('');
    } catch (err) {
      setStationInfo(null);
      setError('Station not found. Please check the station name.');
    }
  };

  return (
    <div className="min-h-screen bg-gray-100">
      <nav className="bg-blue-800 text-white p-4">
        <div className="container mx-auto">
          <h1 className="text-3xl font-bold">Sri Lanka Railways</h1>
          <p className="text-sm mt-1">Station Information System</p>
        </div>
      </nav>

      <main className="container mx-auto px-4 py-8">
        <div className="bg-white rounded-lg shadow-lg p-6 max-w-2xl mx-auto">
          <div className="mb-8">
            <h2 className="text-2xl font-semibold mb-4">Welcome to Sri Lanka Railways</h2>
            <p className="text-gray-600">
              Discover information about railway stations along the Main Line from Colombo Fort to Badulla.
              Enter a station name to find its elevation and distance from Colombo Fort.
            </p>
          </div>

          <form onSubmit={handleSearch} className="mb-6">
            <div className="flex gap-4">
              <input
                type="text"
                value={station}
                onChange={(e) => setStation(e.target.value)}
                placeholder="Enter station name"
                className="flex-1 p-2 border border-gray-300 rounded"
                required
              />
              <button
                type="submit"
                className="bg-blue-600 text-white px-6 py-2 rounded hover:bg-blue-700"
              >
                Search
              </button>
            </div>
          </form>

          {error && (
            <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
              {error}
            </div>
          )}

          {stationInfo && (
            <div className="bg-green-50 border border-green-200 rounded p-6">
              <h3 className="text-xl font-semibold mb-4">{stationInfo.name}</h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="text-gray-600">Elevation</p>
                  <p className="text-2xl font-bold">{stationInfo.elevation} m</p>
                </div>
                <div>
                  <p className="text-gray-600">Distance from Colombo Fort</p>
                  <p className="text-2xl font-bold">{stationInfo.distance} km</p>
                </div>
              </div>
            </div>
          )}

          <div className="mt-8 bg-gray-50 p-4 rounded">
            <h3 className="text-lg font-semibold mb-2">Quick Facts</h3>
            <ul className="text-gray-600 space-y-2">
              <li>• The Main Line runs from Colombo Fort to Badulla</li>
              <li>• Total distance: 292 km</li>
              <li>• Highest elevation: 1,890m (Nanu Oya)</li>
              <li>• Built during British Colonial period (1864-1927)</li>
            </ul>
          </div>
        </div>
      </main>

      <footer className="bg-gray-800 text-white mt-12 py-6">
        <div className="container mx-auto px-4 text-center">
          <p>© 2025 Sri Lanka Railways. All rights reserved.</p>
        </div>
      </footer>
    </div>
  );
}

export default App;

Step 7: Final Project Structure
Your project should now look like this:
```
railway-station-info/
├── node_modules/
├── client/
│   ├── node_modules/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   └── index.css
│   ├── package.json
│   └── tailwind.config.js
├── server.js
└── package.json
```

Step 8: Start the Application
```bash
# In the root directory
npm run dev
```

This will start:
- Backend server on http://localhost:5000
- Frontend development server on http://localhost:3000

Testing the Application:
1. Open http://localhost:3000 in your browser
2. Enter a station name (e.g., "Kandy" or "Colombo Fort")
3. Click Search to see the station's elevation and distance information

Available stations for testing:
- Colombo Fort
- Maradana
- Kandy
- Peradeniya
- Gampola
- Nawalapitiya
- Hatton
- Nanu Oya
- Badulla

Would you like me to explain any specific part in more detail or help you troubleshoot any issues?




Let me help you fix the Tailwind CSS configuration error. This error occurs because we need to properly set up Tailwind CSS with Create React App.

Follow these steps to fix the issue:

1. First, let's install the correct versions of the dependencies. In your client directory:
```bash
cd client

# Remove existing tailwind installation if any
npm uninstall tailwindcss postcss autoprefixer

# Install the correct versions
npm install -D tailwindcss@npm:@tailwindcss/postcss7-compat postcss@^7 autoprefixer@^9
```

2. Create a `postcss.config.js` file in the client directory:
```bash
# Create postcss.config.js
touch postcss.config.js
```

Add this content to `postcss.config.js`:
```javascript
module.exports = {
  plugins: [
    require('tailwindcss'),
    require('autoprefixer'),
  ],
}
```

3. Create/update `tailwind.config.js` in the client directory:
```javascript
module.exports = {
  purge: ['./src/**/*.{js,jsx,ts,tsx}', './public/index.html'],
  darkMode: false,
  theme: {
    extend: {},
  },
  variants: {
    extend: {},
  },
  plugins: [],
}
```

4. Update your `client/src/index.css`:
```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

5. Install CRACO (Create React App Configuration Override) to customize the PostCSS configuration:
```bash
npm install @craco/craco
```

6. Create a `craco.config.js` file in the client directory:
```javascript
module.exports = {
  style: {
    postcss: {
      plugins: [
        require('tailwindcss'),
        require('autoprefixer'),
      ],
    },
  },
}
```

7. Update the scripts in your client's `package.json`:
```json
{
  "scripts": {
    "start": "craco start",
    "build": "craco build",
    "test": "craco test",
    "eject": "react-scripts eject"
  }
}
```

8. After making these changes, stop your development server and clear the node_modules and package-lock.json:
```bash
# In the client directory
rm -rf node_modules package-lock.json
npm install
```

9. Start the development server again from the root directory:
```bash
# Go back to root directory
cd ..
npm run dev
```

This should resolve the CSS build error. The complete directory structure should now look like this:
```
railway-station-info/
├── node_modules/
├── client/
│   ├── node_modules/
│   ├── public/
│   │   └── index.html
│   ├── src/
│   │   ├── App.js
│   │   ├── index.js
│   │   └── index.css
│   ├── craco.config.js
│   ├── postcss.config.js
│   ├── tailwind.config.js
│   └── package.json
├── server.js
└── package.json
```

This configuration uses Tailwind CSS with Create React App in a way that's compatible with PostCSS 7. The error you were seeing should now be resolved.

Let me know if you encounter any other issues or need clarification on any of these steps!
